{"version":3,"sources":["reducers/actions.js","reducers/index.js","components/NavRefreshGeolocation.js","components/DeleteFavourCity.js","actions/index.js","components/MainWeatherInfo.js","components/WeatherLine.js","components/AdvancedWeatherInfo.js","components/Loading.js","components/Error.js","components/WeatherBlock.js","scripts/main.js","components/NavFavourWeather.js","components/FavourWeatherContainer.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["allReducers","combineReducers","action","state","type","requestCreator","payload","cod","newState","city","key","NavRefreshGeolocation","id","className","onClick","props","geoRefreshFunc","React","Component","DeleteFavourCity","name","alt","deleteFavour","src","localStorage","removeItem","cities","JSON","parse","getItem","splice","indexOf","setItem","stringify","dispatch","ReduxActions","connect","MainWeatherInfo","styleClass","this","displayStyle","data","icon","temp","WeatherLine","param","value","AdvancedWeatherInfo","weather","pressure","humidity","wind","coords","Loading","Error","removable","FavourWeatherBlock","loading","error","nextProps","prevState","weatherSearch","requestStr","link","fetch","then","res","json","owner","apiResultParser","err","Math","round","parseFloat","main","parseInt","description","toUpperCase","slice","speed","coord","lat","lon","NavFavourWeather","handleChange","bind","handleSubmit","clearInput","event","setState","target","preventDefault","newCityList","includes","push","onSubmit","placeholder","required","onChange","title","FavourWeatherContainer","list","map","index","WeatherBlock","MainComponent","geoRefresh","reverse","geoWeather","favourWeather","newProps","unshift","navigator","geolocation","getCurrentPosition","position","latitude","longitude","enableHighAccuracy","store","createStore","applyMiddleware","thunk","subscribe","console","log","getState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f842ba9.chunk.js","sourcesContent":["export default function (state=null, action) {\r\n  switch (action.type) {\r\n    case 'REQUESTED_FOR_GEOLOCATION':\r\n      return {...state, [action.requestCreator] : {}};\r\n    case 'REQUESTED_WEATHER':\r\n      return {...state, [action.requestCreator] : {}};\r\n    case 'REQUESTED_WEATHER_SUCCEEDED':\r\n      return {...state, [action.requestCreator] : action.payload}\r\n    case 'REQUESTED_WEATHER_FAILED':\r\n      return {...state, [action.requestCreator] : {cod : -1}}\r\n    case 'DELETE_FAVOUR':\r\n      let newState = {}\r\n      for (let city in state) {\r\n        if (city !== action.key) newState[city] = state[city];\r\n      }\r\n      return newState\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport Actions from './actions';\r\n\r\nconst allReducers = combineReducers ({\r\n  action: Actions\r\n});\r\n\r\nexport default allReducers;\r\n\r\n// const weatherByGeolocation = () => {\r\n//   return {\r\n//     data: {\r\n//       city: undefined,\r\n//       temp: undefined,\r\n//       pressure: undefined,\r\n//       humidity: undefined,\r\n//       weather: undefined,\r\n//       wind: undefined,\r\n//       icon: undefined\r\n//     },\r\n//     loading: false,\r\n//     error: false\r\n//   }\r\n// }\r\n","import React from 'react'\r\n\r\nclass NavRefreshGeolocation extends React.Component {\r\n  render(){\r\n    return (\r\n      <div id=\"nav_refresh_geolocation\">\r\n        <div className=\"text\">Weather here</div>\r\n        <button className=\"button\" id=\"refresh_geolocation\" onClick={() => this.props.geoRefreshFunc()}>Refresh Geolocation</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavRefreshGeolocation;\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport * as ReduxActions from '../actions/index'\r\n\r\nclass DeleteFavourCity extends React.Component {\r\n  render(){\r\n    return (\r\n        <input className=\"img_button\" type=\"image\" name=\"submit\" alt=\"delete\" onClick={() => this.props.deleteFavour(this.props.id)} src=\"img/del.png\" />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deleteFavour: (key) => {\r\n      dispatch(deleteFavour(key));\r\n    }\r\n  }\r\n}\r\n\r\nconst deleteFavour = (key) => {\r\n  localStorage.removeItem(key);\r\n  let cities = JSON.parse(localStorage.getItem('cities'));\r\n  cities.splice(cities.indexOf(key), 1)\r\n  localStorage.setItem('cities', JSON.stringify(cities))\r\n  return (dispatch) => {\r\n    dispatch(ReduxActions.deleteFavour(key));\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(DeleteFavourCity);\r\n","export const requestForGeolocation = (owner) => {\r\n  return { type: 'REQUESTED_FOR_GEOLOCATION', requestCreator: owner  }\r\n};\r\n\r\nexport const requestWeather = (owner) => {\r\n  return { type: 'REQUESTED_WEATHER', requestCreator: owner }\r\n};\r\n\r\nexport const requestWeatherSuccess = (data, owner) => {\r\n  return { type: 'REQUESTED_WEATHER_SUCCEEDED', requestCreator: owner, payload: data }\r\n};\r\n\r\nexport const requestWeatherError = (owner) => {\r\n  return { type: 'REQUESTED_WEATHER_FAILED', requestCreator: owner  }\r\n};\r\n\r\nexport const deleteFavour = (key) => {\r\n  return { type: 'DELETE_FAVOUR', key: key }\r\n};\r\n","import React from 'react';\r\n\r\nimport DeleteFavourCity from './DeleteFavourCity'\r\n\r\nclass MainWeatherInfo extends React.Component {\r\n  render(){\r\n    let styleClass = (this.props.displayStyle === 'Favour') ? 'main_favour_weather_info' : (this.props.displayStyle === 'Geo') ? 'main_geo_weather_info' : '';\r\n    return (\r\n      <div className={styleClass}>\r\n        <div className=\"city\">{this.props.data.city}</div>\r\n        <div className=\"img\"><img className=\"weather_icon\" alt=\"weather\" src={`http://openweathermap.org/img/wn/${this.props.data.icon}@2x.png`} /></div>\r\n        <div className=\"temp\">{this.props.data.temp}°C</div>\r\n        {this.props.displayStyle === 'Favour' && <DeleteFavourCity id={this.props.id} />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainWeatherInfo;\r\n","import React from 'react'\r\n\r\nclass WeatherLine extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"line\">\r\n        <div className=\"param\">{this.props.param}</div>\r\n        <div className=\"value\">{this.props.value}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherLine;\r\n","import React from 'react'\r\nimport WeatherLine from './WeatherLine'\r\n\r\nclass AdvancedWeatherInfo extends React.Component {\r\n  render(){\r\n    return (\r\n      <div id=\"advanced_weather_info\" className=\"list\">\r\n        <WeatherLine param='Weather' value= {this.props.data.weather} />\r\n        <WeatherLine param='Pressure' value= {this.props.data.pressure + ' mmHg'} />\r\n        <WeatherLine param='Humidity' value={this.props.data.humidity + ' %'}/>\r\n        <WeatherLine param='Wind' value= {this.props.data.wind} />\r\n        <WeatherLine param='Coordinates' value= {'[' + this.props.data.coords[0] + ', ' + this.props.data.coords[1] + ']'} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AdvancedWeatherInfo;\r\n","import React from 'react'\r\n\r\nclass Loading extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className='placeholder'>\r\n        <div className='text'>Wait, weather loading is in progress..</div>\r\n        <img className='placeholder_img' alt='loading' src='img/loading.gif' />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react'\r\n\r\nimport DeleteFavourCity from './DeleteFavourCity'\r\n\r\nclass Error extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className='placeholder'>\r\n        <div className='text'>Error, try again later..</div>\r\n        <img className='placeholder_img' alt='loading' src='img/error.gif' />\r\n        { this.props.removable &&\r\n          <DeleteFavourCity id={this.props.id} />\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Error;\r\n","import React from 'react'\r\n\r\n\r\nimport MainWeatherInfo from './MainWeatherInfo'\r\nimport AdvancedWeatherInfo from './AdvancedWeatherInfo'\r\nimport Loading from './Loading'\r\nimport Error from './Error'\r\n\r\nclass FavourWeatherBlock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      error: false\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (JSON.stringify(nextProps.data) !== '{}') {\r\n      if (nextProps.data.cod === 200) {\r\n        return {loading: false, error: false}\r\n      }\r\n      return {loading: false, error: true}\r\n    }\r\n    return {loading: true, error: false}\r\n  }\r\n\r\n  render(){\r\n    let styleClass = (this.props.displayStyle === 'Favour') ? 'favour_block' : (this.props.displayStyle === 'Geo') ? 'geolocation_weather' : '';\r\n    return (\r\n      <div className={styleClass}>\r\n      {\r\n        this.state.loading ? <Loading /> :\r\n          this.state.error ? <Error removable={this.props.removable} id={this.props.id}/> :\r\n            <>\r\n              <MainWeatherInfo data={this.props.data} id={this.props.id} displayStyle={this.props.displayStyle}/>\r\n              <AdvancedWeatherInfo data = {this.props.data}/>\r\n            </>\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FavourWeatherBlock;\r\n","import * as ReduxActions from '../actions/index'\r\n\r\nconst API_KEY = '73a2f4a5254e97adabb2160caa6234a8';\r\n\r\nconst refreshGeolocation = () => {\r\n  return (dispatch) => {\r\n    let requestCreator = 'GeolocationWeather'\r\n    dispatch(ReduxActions.requestForGeolocation(requestCreator));\r\n    navigator.geolocation.getCurrentPosition(geolocationSuccess, geolocationFailure, {enableHighAccuracy: true});\r\n\r\n    function geolocationSuccess(position) {\r\n      let latitude = position.coords.latitude;\r\n      let longitude = position.coords.longitude;\r\n      let requestStr = `lat=${latitude}&lon=${longitude}`;\r\n      return dispatch(weatherSearch(requestStr, requestCreator));\r\n    }\r\n\r\n    function geolocationFailure(error) {\r\n      let defaultCity = 'Saint Petersburg';\r\n      let requestStr = `q=${defaultCity}`;\r\n      return dispatch(weatherSearch(requestStr, requestCreator));\r\n    }\r\n  }\r\n}\r\n\r\nconst weatherSearch = (requestStr, requestCreator) => {\r\n  return (dispatch) => {\r\n    dispatch(ReduxActions.requestWeather(requestCreator));\r\n    let link = `https://api.openweathermap.org/data/2.5/weather?${requestStr}&units=metric&appid=${API_KEY}`;\r\n    fetch(link)\r\n      .then(res => res.json())\r\n      .then(\r\n        data => dispatch(ReduxActions.requestWeatherSuccess(apiResultParser(data), requestCreator)),\r\n        err => dispatch(ReduxActions.requestWeatherError(requestCreator))\r\n      )\r\n  }\r\n}\r\n\r\nconst apiResultParser = (data) => {\r\n  if (data.cod === 200) {\r\n    return {\r\n      cod: data.cod,\r\n      city: data.name,\r\n      temp: Math.round(parseFloat(data.main.temp)),\r\n      pressure: Math.round(parseInt(data.main.pressure) * 0.75),\r\n      humidity: data.main.humidity,\r\n      weather: data.weather[0].description[0].toUpperCase() + data.weather[0].description.slice(1),\r\n      icon: data.weather[0].icon,\r\n      wind: data.wind.speed,\r\n      coords: [data.coord.lat, data.coord.lon]\r\n    };\r\n  } else {\r\n    return { cod: data.cod }\r\n  }\r\n}\r\n\r\nexport {refreshGeolocation, weatherSearch};\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {weatherSearch} from '../scripts/main';\r\n\r\nclass NavFavourWeather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.clearInput = this.clearInput.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  clearInput(){\r\n    this.setState({value: ''});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.weatherSearch(`q=${this.state.value}`, `${this.state.value}`);\r\n    let newCityList = [ this.state.value ];\r\n    let cities = JSON.parse(localStorage.getItem('cities'));\r\n    if (cities != null) {\r\n      for (let city of cities) {\r\n        if (!newCityList.includes(city)) {\r\n          newCityList.push(city);\r\n        }\r\n      }\r\n    }\r\n    localStorage.setItem('cities', JSON.stringify(newCityList))\r\n    this.clearInput()\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div id=\"nav_favour_weather\">\r\n        <div className=\"text\">Favourites</div>\r\n        <form id=\"add_favour_form\" onSubmit={this.handleSubmit}>\r\n          <input className=\"input_text\" name='city_name' type=\"text\" placeholder=\"Add new city\" required value={this.state.value} onChange={this.handleChange} />\r\n          <input className=\"img_button\" type=\"image\" name=\"submit\" alt=\"add\" src=\"img/add.png\" value=\"Submit\"/>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    weatherSearch: (city, title) => {\r\n      dispatch(weatherSearch(city, title));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(NavFavourWeather);\r\n","import React from 'react'\r\n\r\nimport WeatherBlock from './WeatherBlock'\r\n\r\nclass FavourWeatherContainer extends React.Component {\r\n  render(){\r\n    const list = this.props.data.map((city, index) => {\r\n      return <WeatherBlock key={index} data={city.data} id={city.key} displayStyle='Favour' removable={true}/>;\r\n    });\r\n    return (\r\n      <div id='favour_weather_container'>\r\n        {list}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FavourWeatherContainer;\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport NavRefreshGeolocation from './NavRefreshGeolocation'\r\nimport WeatherBlock from './WeatherBlock'\r\nimport NavFavourWeather from './NavFavourWeather'\r\nimport FavourWeatherContainer from './FavourWeatherContainer'\r\n\r\nimport {weatherSearch, refreshGeolocation} from '../scripts/main'\r\n\r\nclass  MainComponent extends React.Component {\r\n  componentDidMount(){\r\n    this.props.geoRefresh();\r\n    let cities = JSON.parse(localStorage.getItem('cities'));\r\n    if (cities !== null){\r\n      for (let city of cities.reverse()) {\r\n        this.props.weatherSearch(`q=${city}`, `${city}`);\r\n      }\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n      <div className='MainComponent'>\r\n        <NavRefreshGeolocation geoRefreshFunc={this.props.geoRefresh} />\r\n        <WeatherBlock data={this.props.geoWeather.data} displayStyle='Geo' id={null} removable={false}/>\r\n        <NavFavourWeather />\r\n        <FavourWeatherContainer data={this.props.favourWeather} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n  let newProps = {\r\n    favourWeather : [],\r\n    geoWeather : { key: 'Geo', data: {}} \r\n  }\r\n  if (state.action !== null){\r\n    for (let key in state.action) {\r\n      if (key !== 'GeolocationWeather'){\r\n        (newProps.favourWeather).unshift({key: key, data: state.action[key]});\r\n      } else {\r\n        newProps.geoWeather = {key: key, data: state.action[key]};\r\n      }\r\n    }\r\n  }\r\n  return newProps\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    weatherSearch: (city, title) => {\r\n      dispatch(weatherSearch(city, title));\r\n    },\r\n    geoRefresh: () => {\r\n      dispatch(refreshGeolocation());\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainComponent);\r\n","//React\nimport React from 'react';\nimport './styles/css/style.css';\n//Redux\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport allReducers from './reducers/index';\n//Thunk\nimport thunk from 'redux-thunk';\n//Components\nimport MainComponent from './components/MainComponent';\n\nconst store = createStore(\n  allReducers,\n  applyMiddleware(thunk)\n);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MainComponent />\n    </Provider>\n  )\n}\n\nstore.subscribe(() =>\n  console.log(store.getState())\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}